---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-container
  labels:
    app: init-container
data:
  UID_BASE: ""
  GID_BASE: ""
  # yamllint disable rule:line-length
  init-uid-gid-base.sh: |
    #!/bin/bash
    function yield {
      echo "$*" >&2
    }
    function verbose {
      yield "$*"
      "$@"
    }
    echo "Script: $0"
    TOKEN="$(</var/run/secrets/kubernetes.io/serviceaccount/token)"
    CA_CERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    APP="poc-01"
    echo "NAMESPACE=${NAMESPACE}"
    oc login --token "${TOKEN}"  \
             --certificate-authority="${CA_CERT}" \
             https://kubernetes.default.svc:443
    if [ "${UID_BASE}" == "" ]; then
      UID_BASE="$( oc get namespace/avisiedo-init-container \
                   -o 'jsonpath={.metadata.annotations.openshift\.io/sa\.scc\.uid-range}' )"
      UID_BASE="${UID_BASE%/*}"
      oc patch configmap ${APP} --patch "{\"data\":{\"UID_BASE\": \"${UID_BASE}\"}}"
    fi
    if [ "${GID_BASE}" == "" ]; then
      GID_BASE="$( oc get namespace/avisiedo-init-container \
                   -o 'jsonpath={.metadata.annotations.openshift\.io/sa\.scc\.supplemental-groups}' )"
      GID_BASE="${GID_BASE%/*}"
      oc patch configmap ${APP} \
         --patch "{\"data\":{\"GID_BASE\":\"${GID_BASE}\"}}"
    fi
    UID_BASE="$( oc get cm/${APP} -o 'jsonpath={.data.UID_BASE}' )"
    GID_BASE="$( oc get cm/${APP} -o 'jsonpath={.data.GID_BASE}' )"
    echo "configMap.data.UID_BASE=${UID_BASE}"
    echo "configMap.data.GID_BASE=${GID_BASE}"
  main.sh: |
    #!/bin/sh
    echo "Script: $0"
    echo "NAMESPACE=${NAMESPACE}"
    echo "UID_BASE=${UID_BASE}"
    echo "GID_BASE=${GID_BASE}"
    while true; do sleep 1; done
