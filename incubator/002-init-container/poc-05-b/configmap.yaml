---
apiVersion: v1
kind: ConfigMap
metadata:
  name: poc-05-b
  labels:
    app: poc-05-b
data:
  DEBUG_TRACE: "2"
  IPA_SERVER_HOSTNAME: "poc-05-b.apps.permanent.idmocp.idm.lab.bos.redhat.com"
  PASSWORD: "Secret123"
  container: "podman"
  container_uuid: ""
  UID_BASE: ""
  GID_BASE: ""
  # yamllint disable rule:line-length
  init-uid-gid-base.sh: |
    #!/bin/bash
    function yield {
      echo "$*" >&2
    }
    function verbose {
      yield "$*"
      "$@"
    }
    echo "Script: $0"
    TOKEN="$(</var/run/secrets/kubernetes.io/serviceaccount/token)"
    CA_CERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    APP="poc-05-b"
    echo "NAMESPACE=${NAMESPACE}"
    oc login --token "${TOKEN}"  \
             --certificate-authority="${CA_CERT}" \
             https://kubernetes.default.svc:443
    if [ "${UID_BASE}" == "" ]; then
      UID_BASE="$( oc get namespace/${NAMESPACE} \
                   -o 'jsonpath={.metadata.annotations.openshift\.io/sa\.scc\.uid-range}' )"
      UID_BASE="${UID_BASE%/*}"
      oc patch configmap ${APP} --patch "{\"data\":{\"UID_BASE\": \"${UID_BASE}\"}}"
    fi
    if [ "${GID_BASE}" == "" ]; then
      GID_BASE="$( oc get namespace/${NAMESPACE} \
                   -o 'jsonpath={.metadata.annotations.openshift\.io/sa\.scc\.supplemental-groups}' )"
      GID_BASE="${GID_BASE%/*}"
      oc patch configmap ${APP} \
         --patch "{\"data\":{\"GID_BASE\":\"${GID_BASE}\"}}"
    fi
    UID_BASE="$( oc get cm/${APP} -o 'jsonpath={.data.UID_BASE}' )"
    GID_BASE="$( oc get cm/${APP} -o 'jsonpath={.data.GID_BASE}' )"
    echo "configMap.data.UID_BASE=${UID_BASE}"
    echo "configMap.data.GID_BASE=${GID_BASE}"

  # yamllint disable rule:line-length
  init-container-uuid.sh: |
    #!/bin/bash
    function yield {
      echo "$*" >&2
    }
    function verbose {
      yield "$*"
      "$@"
    }
    echo "Script: $0"
    TOKEN="$(</var/run/secrets/kubernetes.io/serviceaccount/token)"
    CA_CERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    APP="poc-05-b"
    echo "NAMESPACE=${NAMESPACE}"
    oc login --token "${TOKEN}" \
             --certificate-authority="${CA_CERT}" \
             https://kubernetes.default.svc:443
    container_uuid="$( oc get configmap ${APP} -o 'jsonpath={.data.container_uuid}' )"
    if [ "${container_uuid}" == "" ]; then
      systemd-machine-id-setup
      container_uuid="$(</etc/machine-id)"
      oc patch configmap ${APP} \
         --patch "{\"data\":{\"container_uuid\": \"${container_uuid}\"}}"
    fi
    echo "configMap.data.container_uuid='$( oc get configmap ${APP} -o 'jsonpath={.data.container_uuid}' )'"

  main.sh: |
    #!/bin/sh
    echo "Script: $0"
    echo "NAMESPACE=${NAMESPACE}"
    echo "UID_BASE=${UID_BASE}"
    echo "GID_BASE=${GID_BASE}"
    echo ">>> AFTER"
    echo ">>> /opt/init-container/passwd"
    cat /opt/init-container/passwd
    echo ">>> /opt/init-container/group"
    cat /opt/init-container/group
    while true; do sleep 1; done

  passwd.example: |
    root:x:0:0:root:/root:/bin/bash
    bin:x:1:1:bin:/bin:/sbin/nologin
    daemon:x:2:2:daemon:/sbin:/sbin/nologin
    adm:x:3:4:adm:/var/adm:/sbin/nologin
    lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
    sync:x:5:0:sync:/sbin:/bin/sync
    shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
    halt:x:7:0:halt:/sbin:/sbin/halt
    mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
    operator:x:11:0:operator:/root:/sbin/nologin
    games:x:12:100:games:/usr/games:/sbin/nologin
    ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
    nobody:x:65534:65534:Kernel Overflow User:/:/sbin/nologin
    dbus:x:81:81:System message bus:/:/sbin/nologin
    systemd-coredump:x:999:997:systemd Core Dumper:/:/sbin/nologin
    systemd-resolve:x:193:193:systemd Resolver:/:/sbin/nologin
    kdcproxy:x:288:288:IPA KDC Proxy User:/var/lib/kdcproxy:/sbin/nologin
    ipaapi:x:289:289:IPA Framework User:/:/sbin/nologin
    tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin
    unbound:x:287:287:Unbound DNS resolver:/etc/unbound:/sbin/nologin
    named:x:25:25:Named:/var/named:/bin/false
    apache:x:48:48:Apache:/usr/share/httpd:/sbin/nologin
    ods:x:286:284:softhsm private keys owner:/var/lib/softhsm:/sbin/nologin
    custodia:x:285:283:User for custodia:/:/sbin/nologin
    rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin
    chrony:x:284:282::/var/lib/chrony:/sbin/nologin
    rpcuser:x:29:29:RPC Service User:/var/lib/nfs:/sbin/nologin
    sssd:x:283:281:User for sssd:/:/sbin/nologin
    dirsrv:x:389:389:user for 389-ds-base:/usr/share/dirsrv:/sbin/nologin
    tomcat:x:91:91:Apache Tomcat:/usr/share/tomcat:/sbin/nologin
    pkiuser:x:17:17:Certificate System:/usr/share/pki:/sbin/nologin

  group.example: |
    root:x:0:
    bin:x:1:
    daemon:x:2:
    sys:x:3:
    adm:x:4:
    tty:x:5:
    disk:x:6:
    lp:x:7:
    mem:x:8:
    kmem:x:9:
    wheel:x:10:
    cdrom:x:11:
    mail:x:12:
    man:x:15:
    dialout:x:18:
    floppy:x:19:
    games:x:20:
    tape:x:33:
    video:x:39:
    ftp:x:50:
    lock:x:54:
    audio:x:63:
    users:x:100:
    nobody:x:65534:
    utmp:x:22:
    utempter:x:35:
    dbus:x:81:
    input:x:999:
    kvm:x:36:
    render:x:998:
    systemd-journal:x:190:
    systemd-coredump:x:997:
    systemd-resolve:x:193:
    kdcproxy:x:288:
    ipaapi:x:289:apache
    tss:x:59:
    unbound:x:287:
    printadmin:x:286:
    pkcs11:x:285:
    named:x:25:
    apache:x:48:
    wbpriv:x:88:
    ods:x:284:
    custodia:x:283:
    rpc:x:32:
    chrony:x:282:
    rpcuser:x:29:
    sssd:x:281:
    dirsrv:x:389:
    tomcat:x:91:
    pkiuser:x:17:

  init-ipa-server-install.sh: |
    #!/bin/bash

    echo "Script: $0"

    set -xv

    # UID_BASE and GID_BASE are injected inside the container which execute
    # this script

    USER_NAMES=( "apache" "dbus" "dirsrv" "ipaapi" "kdcproxy" "pkiuser" )
    GROUP_NAMES=( "apache" "dbus" "dirsrv" "ipaapi" "kdcproxy" "pkiuser" )

    [ "$UID_BASE" == "" ] && echo "UID_BASE is not set" && exit 1
    [ "$GID_BASE" == "" ] && echo "GID_BASE is not set" && exit 1

    UID_apache=$(( UID_BASE + 0 ))
    UID_dbus=$(( UID_BASE + 1 ))
    UID_dirsrv=$(( UID_BASE + 2 ))
    UID_ipaapi=$(( UID_BASE + 3 ))
    UID_kdcproxy=$(( UID_BASE + 4 ))
    UID_pkiuser=$(( UID_BASE + 5 ))

    GID_apache=$(( GID_BASE + 0 ))
    GID_dbus=$(( GID_BASE + 1 ))
    GID_dirsrv=$(( GID_BASE + 2 ))
    GID_ipaapi=$(( GID_BASE + 3 ))
    GID_kdcproxy=$(( GID_BASE + 4 ))
    GID_pkiuser=$(( GID_BASE + 5 ))

    FILE=/data/etc/passwd
    for item in "${USER_NAMES[@]}"; do
      _GID_OLD="$( id -g ${item} )"
      _UID_OLD="$( id -u ${item} )"
      _UID_NEW="$( eval printf \${UID_${item}} )"
      _GID_NEW="$( eval printf \${GID_${item}} )"
      awk -F: "BEGIN{OFS=FS}{if(\$1==\"${item}\"){\$3=\"${_UID_NEW}\";\$4=\"${_GID_NEW}\"}; print \$0}" "${FILE}" > /tmp/temporary
      cat /tmp/temporary > "${FILE}"
      for path in /usr /var /opt /data-template /etc; do
        find $path -u ${_UID_OLD} 2>/dev/null | xargs chown ${_UID_NEW}
      done
    done
    cat "$FILE"

    FILE=/data/etc/group
    for item in "${GROUP_NAMES[@]}"; do
      _GID_OLD="$( id -g ${item} )"
      _GID_NEW="$( eval printf \${GID_${item}} )"
      awk -F: "BEGIN{OFS=FS}{if(\$1==\"${item}\"){\$3=\"${_GID_NEW}\"}; print \$0}" "${FILE}" > /tmp/temporary
      cat /tmp/temporary > "${FILE}"
      for path in /usr /var /opt /data-template /etc; do
        find $path -g ${_GID_OLD} 2>/dev/null | xargs chgrp ${_GID_NEW}
      done
    done
    cat "$FILE"

    exit 0